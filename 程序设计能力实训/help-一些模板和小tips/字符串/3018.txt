有一个单词 W，输出它在字符串 S 中从左到右第一次出现的位置 IDX(设 S 中的第 1 个字符的位置为 1)。W 只由英文字母组成，S 除英文字母和汉字之外在任何位置（包括头和尾）另有一个或多个连续的空格。

查找单词时，不区分大小写，但要求完全匹配，即单词 W 必须与 S 中的某一独立单词在不区分大小写的情况下完全匹配。W 仅是 S 中某一单词的一部分就不算匹配。
Input
第 1 行：一个整数 T (1≤T≤10) 为问题数。

接下来共 2*T 行，对应每个问题有 2 行，表示 W 和 S （1≤W 长度≤10; 1≤S 长度≤1,000,000）。
Output

 对于每个问题，输出一行问题的编号（0 开始编号，格式：`case #0:` 等）。
然后对应每个问题在一行中输出 IDX。S 中没有找到 W 时输出 None。

Examples
input
3
IN
Find a word within a string in English and in Chinese.
to
Find a word within a string in   English and in Chinese. 这行开头有4个空格.
In
Find a word within a string in   English and in Chinese. 这行开头有4个空格.
output
case #0:
29
case #1:
None
case #2:
33
Hints
string.h中的函数strlwr和strlupr分别把一个字符串中的全部字符转换成小写和大写，strstr在一个字符串中找出另一字符串出现的位置。
函数strlwr：
原型：extern char *strlwr(char *s);
功能：将字符串s转换为小写形式
说明：只转换s中出现的大写字母，不改变其它字符。返回指向s的指针。
函数strupr：与函数strlwr类似
函数strstr：
原型：extern char *strstr(const char *s1, const char *s2);
功能：返回s2从左到右第1次在s1中出现的位置，如果没有找到，返回0
#include<stdio.h>
#include<string.h>
#include<ctype.h>
#define LEN 1000001
#define LEN1 11
char* _strlwr(char *st)
{
    char *o=st;
    while(*st!='\0')
    {
        *st=tolower(*st);
        st++;
    }
    return o;

}
int main()
{
    int t,i;
    char s[LEN],s1[LEN1];
    char *p;

    scanf("%d",&t);
    getchar();
    for(i=0;i<t;i++)
    {
        gets(s1);
        gets(s);
        _strlwr(s);
        _strlwr(s1);

        while( p=strstr(s,s1))
        {
            if(*(p-1)==' '&&*(p+strlen(s1))==' '||*(p-1)==' '&&*(p+strlen(s1))=='\0'||*p==s[0])
        {
            printf("case #%d:\n",i);
            printf("%d\n",p-s+1);
            break;
        }
        else
            *p=' ';
        }
        if(!p)
        {
            printf("case #%d:\n",i);
            printf("None\n");
        }
    }
}
